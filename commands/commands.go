package commands

import (
	"fmt"
	"image/color"
	"os"
	"os/exec"
	"strings"
	"sync"
	"time"

	"adgui/locations"
	"adgui/theme"
	"adgui/ui"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/driver/desktop"
)

const startDelay = 3 * time.Second // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

// messages captured from adguard-cli stdout
const (
	statusDisconnected = "VPN is disconnected"
	statusConnectedTo  = "Successfully Connected to"
)

var (
	DisconnectedColor = color.NRGBA{R: 128, G: 128, B: 128, A: 255} // –°–µ—Ä—ã–π
	ConnectedColor    = color.NRGBA{R: 0, G: 255, B: 0, A: 255}     // –ó–µ–ª–µ–Ω—ã–π
	WarningColor      = color.NRGBA{R: 255, G: 255, B: 0, A: 255}   // –ñ–µ–ª—Ç—ã–π
)

type VPNManager struct {
	ui           *ui.UI
	deskApp      desktop.App
	menu         *fyne.Menu
	statusTicker *time.Ticker
	updateReqs   chan struct{}
	checkReqs    chan struct{}

	mutex       sync.RWMutex
	status      string
	location    string
	isConnected bool
}

func New(ui *ui.UI) *VPNManager {
	if desk, ok := ui.DesktopApp(); ok {
		vpnManager := &VPNManager{
			ui:         ui,
			deskApp:    desk,
			updateReqs: make(chan struct{}, 1),
			checkReqs:  make(chan struct{}, 1),
		}
		vpnManager.createTrayMenu()

		// –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
		go vpnManager.statusCheckLoop()
		go vpnManager.updateUI()
		return vpnManager
	}
	fmt.Println("System tray not supported")
	return nil
}

func (v *VPNManager) updateUI() {
	select {
	case v.checkReqs <- struct{}{}:
		time.Sleep(200 * time.Millisecond)
	default:
	}
	for range v.updateReqs {
		v.updateTrayIcon()
		v.updateMenuItems()
	}
}

func (v *VPNManager) createTrayMenu() {
	status := fyne.NewMenuItem("Adguard VPN", func() {})
	dashboard := fyne.NewMenuItem("Show dashboard", func() {
		v.dashboard()
	})
	connectAuto := fyne.NewMenuItem("Connect Auto", func() {
		v.connectAuto()
	})
	connectTo := fyne.NewMenuItem("Connect To...", func() {
		v.connectToList()
	})
	disconnect := fyne.NewMenuItem("Disconnect", func() {
		v.disconnect()
	})
	v.menu = fyne.NewMenu("AdGuard VPN Client",
		status,
		dashboard,
		connectAuto,
		connectTo,
		fyne.NewMenuItemSeparator(),
		disconnect,
	)
	v.menu.Items[0].Disabled = true // status field

	v.deskApp.SetSystemTrayMenu(v.menu)
}

func (v *VPNManager) updateMenuItems() {
	v.mutex.Lock()
	defer v.mutex.Unlock()

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
	if v.menu != nil {
		items := v.menu.Items
		if v.isConnected {
			v.menu.Label = "VPN connected"
			items[0].Icon = theme.MenuConnectedIcon
			items[0].Label = strings.ToUpper(v.location)
		} else {
			v.menu.Label = "VPN disconected"
			items[0].Icon = theme.MenuDisconnectedIcon
			items[0].Label = "OFF"
		}
		items[1].Disabled = true           // FIXME Dashboard yet not ready
		items[2].Disabled = v.isConnected  // Connect Auto
		items[3].Disabled = false          // Connect To... available always
		items[4].Disabled = !v.isConnected // Disconnect
		v.menu.Items = items
		fyne.Do(func() {
			v.deskApp.SetSystemTrayMenu(v.menu)
		})
	}
}

func (v *VPNManager) updateTrayIcon() {
	v.mutex.RLock()
	defer v.mutex.RUnlock()

	fyne.Do(func() {
		if v.isConnected {
			v.deskApp.SetSystemTrayIcon(theme.ConnectedIcon)
		} else {
			v.deskApp.SetSystemTrayIcon(theme.DisconnectedIcon)
		}
	})
}

func (v *VPNManager) executeCommand(args ...string) (string, error) {
	cmdPath := os.Getenv("ADGUARD_CMD")
	if cmdPath == "" {
		cmdPath = "adguardvpn-cli"
	}

	cmd := exec.Command(cmdPath, args...)
	output, err := cmd.CombinedOutput()
	return string(output), err
}

func (v *VPNManager) connectAuto() {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π
	output, err := v.executeCommand("connect")
	if err != nil {
		fmt.Printf("Could not connect: %s: %s\n", err, output)
		// –†–∞–∑ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–µ—Ä–µ–¥
		// –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –∫–æ–Ω–Ω–µ–∫—Ç–∞.
		time.Sleep(1 * time.Second)
	}

	// –ò–¥—ë–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –ø—É—Ç—ë–º.
	// –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é, –¥–ª—è –∫–æ–Ω–Ω–µ–∫—Ç–∞ –∫ –Ω–µ–π.
	actualLocations := locations.ParseLocations(output)
	if len(actualLocations) == 0 {
		fmt.Println("No locations found for auto-connect")
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–∏–Ω–≥–æ–º
	fastest := locations.FindFastestLocation(actualLocations)
	if fastest == nil {
		fmt.Println("Could not find fastest location")
		return
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∞–º–æ–º—É –±—ã—Å—Ç—Ä–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
	v.connectToLocation(fastest.City)
}

func (v *VPNManager) connectToList() {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π
	output, err := v.executeCommand("list-locations")
	if err != nil {
		fmt.Printf("List locations error: %v\nOutput: %s\n", err, output)
		return
	}

	// –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π
	actualLocations := locations.ParseLocations(output)
	if len(actualLocations) == 0 {
		fmt.Println("No locations found")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–∫–∞—Ü–∏–∏
	v.ui.ShowLocationSelector(actualLocations, v.connectToLocation)
}

func (v *VPNManager) connectToLocation(city string) {
	output, err := v.executeCommand("connect", "-l", city)
	if err != nil {
		fmt.Printf("Connect to location error: %v\nOutput: %s\n", err, output)
		return
	}

	if strings.Contains(output, statusConnectedTo) {
		v.mutex.Lock()
		v.isConnected = true
		v.location = city
		v.mutex.Unlock()

		select {
		case v.updateReqs <- struct{}{}:
		default:
		}
	}
}

func (v *VPNManager) disconnect() {
	output, err := v.executeCommand("disconnect")
	if err != nil {
		fmt.Printf("Disconnect error: %v\nOutput: %s\n", err, output)
		return
	}

	v.mutex.Lock()
	v.isConnected = false
	v.location = ""
	v.status = statusDisconnected
	v.mutex.Unlock()

	select {
	case v.updateReqs <- struct{}{}:
	default:
	}
}

func (v *VPNManager) showLicense() {
	output, err := v.executeCommand("license")
	if err != nil {
		fmt.Printf("Show license error: %v\nOutput: %s\n", err, output)
		return
	}
	ui.New().ShowLicense(output)

	select {
	case v.updateReqs <- struct{}{}:
	default:
	}
}

func (v *VPNManager) statusCheckLoop() {
	time.Sleep(startDelay)
	v.checkStatus()

	// Regular checks
	v.statusTicker = time.NewTicker(30 * time.Second)
	defer v.statusTicker.Stop()
	select {
	case <-v.checkReqs:
		v.checkStatus()
	case <-v.statusTicker.C:
		v.checkStatus()
	}
}

func (v *VPNManager) checkStatus() {
	output, err := v.executeCommand("status")
	if err != nil {
		fmt.Printf("Status check error: %v\n", err)
		return
	}

	v.mutex.Lock()
	v.status = output
	v.mutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
	if strings.Contains(output, statusDisconnected) {
		v.mutex.Lock()
		v.isConnected = false
		v.location = ""
		fmt.Printf("status check: disconnected\n")
		v.mutex.Unlock()
	} else if strings.Contains(output, "Connected to") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
		lines := strings.SplitSeq(output, "\n")
		for line := range lines {
			if strings.Contains(line, "Connected to") {
				// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É ANSI –∫–æ–¥–∞–º–∏
				// –§–æ—Ä–º–∞—Ç: "Connected to [1mLOCATION[0m in ..."
				location := line
				// –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
				prefix := "Connected to "
				if idx := strings.Index(location, prefix); idx >= 0 {
					location = location[idx+len(prefix):]
				}
				// –£–¥–∞–ª—è–µ–º ANSI –∫–æ–¥—ã –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
				location = strings.ReplaceAll(location, "[1m", "")
				location = strings.ReplaceAll(location, "[0m", "")
				// –£–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
				if idx := strings.Index(location, " in "); idx >= 0 {
					location = location[:idx]
				}
				// –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
				location = strings.TrimSpace(location)

				v.mutex.Lock()
				v.location = location
				v.isConnected = true
				fmt.Printf("status check: connected to %s\n", v.location)
				v.mutex.Unlock()
				break
			}
		}
	}

	select {
	case v.updateReqs <- struct{}{}:
	default:
	}
}

func (v *VPNManager) dashboard() {
	v.menu.Items[0].Disabled = true
	_ = ui.New().Dashboard() // FIXME
	select {
	case v.updateReqs <- struct{}{}:
	default:
	}
}
